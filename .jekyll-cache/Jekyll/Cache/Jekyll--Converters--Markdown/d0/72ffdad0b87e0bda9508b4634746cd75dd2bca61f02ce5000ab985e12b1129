I"E<h1 id="adding-the-current_user-to-an-imported-csv-in-rails-6">Adding the current_user to an imported CSV in Rails 6</h1>
<p>December 31, 2019</p>

<p>I worked through the GoRails videos on importing and exporting CSV and they were wonderful. If you’re stuck I’d highly recommend checking them out. \</p>

<p>I wanted to customize my implementation a bit by adding a current user and their team to the csv import so they’d go to the right place. However, since the videos covered a more generic implementation, the rest was up to me. I got stuck on this part for a while so I’m posting it here just in case anyone else on the interweb runs into the same problem (hello, internet citizens!).</p>

<p>My strategy that I landed up using was to create hidden fields in the form where the file is uploaded and then use those parameters when importing so I could add them then. Passing an instance variable like current_user does not work in the model. Now I know!</p>

<hr />

<h3 id="in-my-controller">In my controller:</h3>

<p>Here’s <code class="highlighter-rouge">items_controller.rb</code>:</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>def import

@import = Item::Import.new item_import_params
    if @import.save

redirect_to root_path, notice: "Imported #{@import.imported_count} items"

else

    @items = Item.where('team_id = ?', current_user.team_id)
    flash[:alert] = "There were #{@import.errors.count} errors with your csv file"

    render action: :index

end
</code></pre></div></div>

<p>In <code class="highlighter-rouge">private</code> in the items controller:</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>def item_import_params
     params.require(:item_import).permit(:file, :user_id, :team_id)
end
</code></pre></div></div>

<p>In the <code class="highlighter-rouge">index</code> method of my controller:</p>

<p><code class="highlighter-rouge"> @import = Item::Import.new</code></p>

<h3 id="in-my-view">In my view:</h3>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>    &lt;%= form_for @import, url: import_items_path, multipart: true do |f| %&gt;
      &lt;% if @import.errors.any? %&gt;
        &lt;div class="alert alert-error"&gt;
          &lt;% @import.errors.full_messages.each do |msg| %&gt;
            &lt;div&gt; &lt;%= msg %&gt;&lt;/div&gt;
          &lt;% end %&gt;
        &lt;/div&gt;
      &lt;% end %&gt;
      &lt;%= f.file_field :file %&gt;
      &lt;%= f.hidden_field(:user_id, :value =&gt; current_user.id) %&gt;
      &lt;%= f.hidden_field(:team_id, :value =&gt; @team) %&gt;
      &lt;%= f.submit "Upload" %&gt;
    &lt;% end %&gt;
</code></pre></div></div>

<h3 id="in-modelsitemimportrb">In models/item/import/rb:</h3>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>class Item::Import
include ActiveModel::Model
</code></pre></div></div>

<p>attr_accessor :file, :imported_count, :user_id, :team_id</p>

<p># process csv file
      def process!
    @imported_count = 0
    table = CSV.read(file.path, {headers: true, col_sep: “,”})  <br />
          # Add another col, row by row:
          table.each do |row|
            row[“user_id”] = user_id
            row[“team_id”] = team_id
          end
          # write to file
          CSV.open(file.path, “w”) do |f|
            f « table.headers
            table.each{|row| f « row}
          end
      CSV.foreach(file.path, headers: true, header_converters: :symbol) do |row|
       item = Item.assign_from_row(row)
             if item.save
              @imported_count += 1
             else
              errors.add(:base, “Line #{$.} - #{item.errors.full_messages.join(“,”)}”)
          #puts “#{item.name} - #{item.errors.full_messages.join(“,”)}” if item.errors.any?
             end
      end
      end</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  def save
process!
    errors.none?
 end
end
</code></pre></div></div>

<h3 id="in-my-items-model">In my items model:</h3>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>def self.assign_from_row(row)
   item = Item.where(name: row[:name]).first_or_initialize
   item.assign_attributes row.to_hash.slice(:board_id, :team_id, :user_id)
   item    
end
</code></pre></div></div>
:ET